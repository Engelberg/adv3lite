<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Character Building &mdash; The Flight Attendant</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="character.htm">Character Building</a> &gt; 
The Flight Attendant
<br><span class="navnp"><a class="nav" href="cortes.htm"><i>Prev:</i> Pablo Cortez</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="cockpit.htm"><i>Next:</i> Cockpit Controls</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">
<h1>The Flight Attendant &mdash; Getting in a State</h1>

<p>The third and final NPC we'll implement is the flight attendant, who'll also be the most complex of the three. For a change we'll implement her as a female NPC, and her name, which the player character may or may not learn, will be Angela. Once again we'll start by defining the basic Actor object:</p>

<p><div class="code"><pre>
angela: Actor 'flight attendant; statuesque young; woman angela; her'
    @planeFront
    "She's a statuesque and by no means unattractive young woman. "
    
    shouldNotAttackMsg = 'That would be cruel and unnecessary. '
    
    globalParamName = 'angela'
;
</pre></div></p>

<p>The one new feature we've introduced here is the <strong>globalParamName</strong> property. Because the player character may learn the flight attendant's name at some point during the course of the game, it's hard to know when text that mentions her should call her 'the flight attendant' and when it should call her 'Angela'. By giving her a <span class="code">globalParamName</span> we can use a message substitution parameter like '{the subj angela}' whenever we need to refer to her, and either 'the flight attendant' or 'Angela' will be substituted for it, according to the current value of her name property. At the start of the game, she starts out as 'The flight attendant'. The player character can only learn her name once we've implemented some conversational responses, which we'll leave until Chapter 11.</p>

<p>Otherwise this definition looks even simpler than those of the previous two NPCs, but that's because most of the complexity is going to be farmed out to <strong>ActorState</strong> objects. While Pablo Cortez and the security guard don't change much in over the course of the game &mdash; Cortez only makes a relatively fleeting appearance in one scene, and the guard just keeps on guarding &mdash; the flight attendant will be in different states at different points in the game. When we first meet her she'll be greeting passengers as they board the plane and asking to see their tickets. During the takeover scene she'll be standing in the jetway seeing to the disembarking passengers, or else talking with the player character. Finally, she'll be back aboard the plane to look after the new passengers, effectively as their hostage.</p>

<p>Rather than trying to represent these four different states with a lot of if-statements or switch-statements on the Actor object, we'll represent each of them with an <strong>ActorState</strong>. Amongst other things an ActorState can be used to define the Actor's current <span class="code">specialDesc</span>, <span class="code">stateDesc</span>, and action and travel notifications, such as <span class="code">beforeAction()</span>, <span class="code">afterAction()</span>, <span class="code">beforeTravel()</span> and <span class="code">afterTravel(</span>); <span class="code">stateDesc</span> is an extra description that can be tacked on to the desc defined on the Actor. What happens behind the scenes is that the Actor object takes the value of its <span class="code">specialDesc</span>, <span class="code">stateDesc</span>, <span class="code">beforeTravel()</span>, <span class="code">afterTravel()</span>, <span class="code">beforeAction()</span> and <span class="code">afterAction()</span> properties and methods from its current ActorState object, if it has one, or otherwise uses its <span class="code">actorSpecialDesc</span> etc. properties. That's why it's generally not a good idea to override <span class="code">specialDesc</span> and all the rest on the Actor object, but rather use actorSpecialDesc instead, since even if you start out with the intention of not using ActorStates with a particular object, should you later change your mind, having overridden <span class="code">specialDesc</span> and other such properties on the Actor object will have broken part of the ActorState mechanism.</p>

<p>The Actor's current ActorState is referenced in its <strong>curState</strong> property (which is allowed to be nil, if there is no ActorState currently associated with the Actor). However, if you want an Actor to start out in a particular state, you can just set <span class="code">isInitState = true</span> on the ActorState in question. Like AgendaItems, ActorStates are associated with their Actor by being located within them using the + syntax. We can thus define Angela's initial ActorState like this:</p>

<p><div class="code"><pre>
+ angelaGreetingState: ActorState
    isInitState = true
    specialDesc = "{The subj angela} {is} standing just inside the entrance
        greeting passengers as they board. "
    stateDesc = "Right now, she's wearing a fixed professional smile. "
    
    beforeTravel(traveler, connector)
    {
        if(traveler == me)
        {
            switch(connector)
            {
            case cockpitDoor:
                "&lt;q&gt;I'm afraid you can't go in there, sir,&lt;/q&gt; {the subj angela}
                stops you. &lt;q&gt;Only flight crew are allowed in the cockpit.&lt;/q&gt;.
                ";
                
                exit;
               
            case planeRear:
                if(!ticketSeen)
                {
                    "&lt;q&gt;I'm afraid I can\'t let you board the plane till I\'ve
                    seen your ticket, sir,&lt;/q&gt; {the subj angela} insists. ";
                    exit;
                }
                break;
            default:
                break;
            }
        }
    }
    
    ticketSeen = nil
;
</pre></div></p>

<p>The <span class="code">specialDesc</span> defined on this ActorState is how the flight attendant will be shown in the room description when the player character first encounters her. The stateDesc will be added to the Actor's desc when she's examined, so that X FLIGHT ATTENDANT will initially produce "She's a statuesque and by no means unattractive young woman. Right now, she's wearing a fixed professional smile." We use the <span class="code">beforeTravel()</span> method on this ActorState to make Angela prevent the player character from venturing into the cockpit, or moving further into the plane until Angela has seen his ticket, for which purpose we define a custom <span class="code">ticketSeen</span> property on the ActorState object.</p>

<p>Angela's other three ActorStates can be defined in like manner, though obviously without defining <span class="code">isInitState = true</span> on any of them, and without any need for a beforeTravel() method:</p>

<p><div class="code"><pre>
+ angelaAssistingState: ActorState
    specialDesc = "{The subj angela} {is} standing in the middle of the jetway,
        trying to calm the passengers who have just been forced off the plane. "
    
    stateDesc = "Right now, she's looking rather harrassed. "
;

+ angelaTalkingState: ActorState
    specialDesc = "{The subj angela} {is} facing you, waiting for you to speak.
        "    
;

+ angelaSeatedState: ActorState
    specialDesc = "{The subj angela} {is} sitting near the front of the plane. "
    stateDesc = "Right now, though, she's looking worried and afraid. "
;
</pre></div></p>



<p>Our final task in this chapter is to make sure that the flight attendant ends up in the right state (and the right place) at the right time. To change an Actor's current ActorState you should always call is <strong>setState(<em>state</em>)</strong> method. We could do this in the <span class="code">whenStarting()</span> and <span class="code">whenEnding(</span>) methods of the takeover scene, but we'll once again use a couple of AgendaItems to do the job:</p>

<p><div class="code"><pre>
+ angelaAssistingAgenda: AgendaItem
    initiallyActive = true
    isReady = (takeover.isHappening)
    
    invokeItem()
    {
        isDone = true;
        getActor.moveInto(jetway);
        getActor.setState(angelaAssistingState);
        getActor.addToAgenda(angelaReboardingAgenda);
    }
;

+ angelaReboardingAgenda: AgendaItem
    isReady = (takeover.hasHappened)
    
    invokeItem()
    {
        isDone = true;
        getActor.moveInto(planeFront);
        getActor.setState(angelaSittingState);
    }
    
;
</pre></div></p>

<p>If you compile and run the game now, you'll find that there's now no way for the player character to reach the rear of the plane and trigger the takeover scene, other than by using debugging commands to teleport around the map. What we need is one more AgendaItem that is triggered when the player character first boards the plane that causes the flight attendant to ask for the player character's ticket. At the moment we don't have the means for him to show her the ticket, so we'll temporarily assume that the attendant is satisfied if she can see it. For this purpose we'll use a <strong>ConvAgendaItem</strong>, which is triggered as soon at the player character is in a position to speak to the actor concerned, which in this case will happen as soon as he enters the front of the plane:</p>

<p><div class="code"><pre>
+ angelaTicketAgenda: ConvAgendaItem
    initiallyActive = true
    
    invokeItem()
    {
        isDone = true;
        "&lt;q&gt;Welcome aboard, sir,&lt;/q&gt; {the subj angela} greets you with a smile.
        &lt;q&gt;May I see your ticket please?&lt;/q> ";
        
        <span class="comment">/* Temporary code until we reach Chapter 11 */</span>
        if(ticket.isDirectlyIn(me))
        {
            "She glances down at the ticket in your hand, and temporarily takes
            it off you to check it. &lt;q&gt;That's fine, sir,&lt;/q&gt; she assures you as
            she returns it to you. &lt;q&gt;Please move to the rear of the plane to
            find a seat.&lt;/q&gt; ";
            angelaGreetingState.ticketSeen = true;
        }
        
    }
;
</pre></div></p>

<p>That's fine apart from one thing: if the player character boards the plane without the ticket, he won't get a second chance to show it to the flight attendant and the game will be in an unwinnable state. The best way to cure that is to have the be<span class="code">foreTravel()</span> method of angelaGreetingState reset tangelaTicketAgenda  (i.e. add it to Angela's agendaList again) if the player character leaves the plain when Angela hasn't seen the ticket:</p>

<p><div class="code"><pre>
+ angelaGreetingState: ActorState
    isInitState = true
    specialDesc = "{The subj angela} {is} standing just inside the entrance
        greeting passengers as they board. "
    stateDesc = "Right now, she's wearing a fixed professional smile. "
    
    beforeTravel(traveler, connector)
    {
        if(traveler == me)
        {
            switch(connector)
            {
            case cockpitDoor:
                "&lt;q&gt;I'm afraid you can't go in there, sir,&lt;/q&gt; {the subj angela}
                stops you. &lt;q&gt;Only flight crew are allowed in the cockpit.&lt;/q&gt;.
                ";
                
                exit;
               
            case planeRear:
                if(!ticketSeen)
                {
                    "&lt;q&gt;I'm afraid I can\'t let you board the plane till I\'ve
                    seen your ticket, sir,&lt;/q&gt; {the subj angela} insists. ";
                    exit;
                }
                break;
            <strong>case jetway:
                if(!ticketSeen)
                    getActor.addToAgenda(angelaTicketAgenda);
                break;</strong>
            default:
                break;
            }
        }
    }
    
    ticketSeen = nil
;
</pre></div></p>


<p>And that's where we'll leave Angela and her ActorStates for now, although we'll find further uses for them in Chapter 11 when we come to implement some conversation. In the meantime, if you'd like more information on <a href="../manual/actorstate.htm">ActorStates</a>, see the <em>adv3Lite Library Manual</em>.</p>

</div>
<hr class="navb"><div class="navb">
<i>adv3Lite Library Tutorial</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="character.htm">Character Building</a> &gt; 
The Flight Attendant
<br><span class="navnp"><a class="nav" href="cortes.htm"><i>Prev:</i> Pablo Cortez</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="cockpit.htm"><i>Next:</i> Cockpit Controls</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>